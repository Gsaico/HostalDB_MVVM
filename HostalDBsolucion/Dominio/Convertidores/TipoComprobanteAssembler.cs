//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015/06/15 - 08:56:06
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using Dominio.Dtos;
using PersistenciaDatos;

namespace Dominio.Convertidores
{

    /// <summary>
    /// Assembler for <see cref="TipoComprobante"/> and <see cref="TipoComprobanteDTO"/>.
    /// </summary>
    public static partial class TipoComprobanteAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="TipoComprobanteDTO"/> converted from <see cref="TipoComprobante"/>.</param>
        static partial void OnDTO(this TipoComprobante entity, TipoComprobanteDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="TipoComprobante"/> converted from <see cref="TipoComprobanteDTO"/>.</param>
        static partial void OnEntity(this TipoComprobanteDTO dto, TipoComprobante entity);

        /// <summary>
        /// Converts this instance of <see cref="TipoComprobanteDTO"/> to an instance of <see cref="TipoComprobante"/>.
        /// </summary>
        /// <param name="dto"><see cref="TipoComprobanteDTO"/> to convert.</param>
        public static TipoComprobante ToEntity(this TipoComprobanteDTO dto)
        {
            if (dto == null) return null;

            var entity = new TipoComprobante();

            entity.idcomprobante = dto.idcomprobante;
            entity.nombrecomprobante = dto.nombrecomprobante;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="TipoComprobante"/> to an instance of <see cref="TipoComprobanteDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="TipoComprobante"/> to convert.</param>
        public static TipoComprobanteDTO ToDTO(this TipoComprobante entity)
        {
            if (entity == null) return null;

            var dto = new TipoComprobanteDTO();

            dto.idcomprobante = entity.idcomprobante;
            dto.nombrecomprobante = entity.nombrecomprobante;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="TipoComprobanteDTO"/> to an instance of <see cref="TipoComprobante"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<TipoComprobante> ToEntities(this IEnumerable<TipoComprobanteDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="TipoComprobante"/> to an instance of <see cref="TipoComprobanteDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<TipoComprobanteDTO> ToDTOs(this IEnumerable<TipoComprobante> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }
        public static void Actualizar(Dominio.Dtos.TipoComprobanteDTO dto, PersistenciaDatos.TipoComprobante entity)
        {

            entity.idcomprobante = dto.idcomprobante;
            entity.nombrecomprobante = dto.nombrecomprobante;


        }
    }
}
